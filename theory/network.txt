How HTTP Works
HTTP (HyperText Transfer Protocol) is a stateless, request-response protocol
used for communication between clients (like web browsers) and servers.
It works on the application layer of the internet and typically uses
port 80 for HTTP and port 443 for HTTPS (secure version with TLS/SSL encryption).

1. HTTP Request-Response Cycle
When you visit a website, your browser (client) sends an HTTP request to
a web server. The server processes it and responds with an HTTP response.

Step-by-Step Process:
DNS Resolution – The browser resolves the domain name (e.g., example.com)
to an IP address using DNS.

TCP Connection – A connection is established between the client and the
server using TCP (Transmission Control Protocol).

Sending HTTP Request – The client sends a request to the server, specifying:
HTTP method (GET, POST, PUT, DELETE, etc.)

Headers (metadata like user-agent, cookies)
Request body (for POST, PUT requests)

Server Processes Request – The web server processes the request, possibly
querying a database or executing backend logic.

Sending HTTP Response – The server sends back a response containing:
Status Code (e.g., 200 OK, 404 Not Found)
Headers (like Content-Type: text/html)
Response Body (HTML, JSON, etc.)

Rendering & Closing Connection – The browser processes the response,
displays the webpage, and closes the connection if not using HTTP keep-alive.

//---------------------------------------------------------------------------------------------------

What is TCP (Transmission Control Protocol)?
TCP (Transmission Control Protocol) is a reliable, connection-oriented
protocol that ensures data is transmitted accurately and in the correct
order between devices over a network. It operates at the Transport Layer of the OSI model.

How TCP Works
TCP ensures reliable communication between a client and a server using a
process called connection establishment, data transmission, and connection termination.

1. TCP Connection Establishment (Three-Way Handshake)
Before data transfer, TCP establishes a connection between
the sender and receiver using a 3-way handshake:

SYN (Synchronize) → Client sends a SYN packet to the server to initiate a connection.
SYN-ACK (Synchronize-Acknowledge) → Server responds with SYN-ACK, confirming receipt.
ACK (Acknowledge) → Client sends an ACK to complete the handshake.
After this, the connection is established, and data transfer begins.

2. TCP Data Transmission & Reliability Features
Once a connection is established, TCP breaks data into packets and sends them to the receiver.
//----------------------------------------------------------------------------------------------------
Key Features:

Segmentation: Large data is divided into smaller packets.
Sequence Numbers: Each packet has a unique sequence number to ensure correct order.
Acknowledgment (ACK): The receiver sends an acknowledgment for each received packet.
Retransmission: If a packet is lost or corrupted, TCP automatically resends it.
Flow Control: Uses a mechanism called Sliding Window Protocol to control data flow and prevent network congestion.
//----------------------------------------------------------------------------------------------------

When to Use What?
Use HTTPS when you need stateless, secure, and reliable
request-response communication (e.g., fetching website data).
Use WebSocket when you need real-time, bidirectional,
and low-latency communication (e.g., chat applications, live sports updates).

//websockets